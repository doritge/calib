// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// iterate_cyclic
NumericMatrix iterate_cyclic(NumericMatrix X, Rcpp::DataFrame P, int states, int threshold);
RcppExport SEXP _calib_iterate_cyclic(SEXP XSEXP, SEXP PSEXP, SEXP statesSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type states(statesSEXP);
    Rcpp::traits::input_parameter< int >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_cyclic(X, P, states, threshold));
    return rcpp_result_gen;
END_RCPP
}
// iterate_index
IntegerMatrix iterate_index(IntegerMatrix X, Rcpp::DataFrame P, IntegerVector R);
RcppExport SEXP _calib_iterate_index(SEXP XSEXP, SEXP PSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type P(PSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_index(X, P, R));
    return rcpp_result_gen;
END_RCPP
}
// iterate_life
NumericMatrix iterate_life(NumericMatrix X, Rcpp::DataFrame P, int rule);
RcppExport SEXP _calib_iterate_life(SEXP XSEXP, SEXP PSEXP, SEXP ruleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type rule(ruleSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_life(X, P, rule));
    return rcpp_result_gen;
END_RCPP
}
// iterate_total
NumericMatrix iterate_total(NumericMatrix X, Rcpp::DataFrame P, IntegerVector R);
RcppExport SEXP _calib_iterate_total(SEXP XSEXP, SEXP PSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type P(PSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_total(X, P, R));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_calib_iterate_cyclic", (DL_FUNC) &_calib_iterate_cyclic, 4},
    {"_calib_iterate_index", (DL_FUNC) &_calib_iterate_index, 3},
    {"_calib_iterate_life", (DL_FUNC) &_calib_iterate_life, 3},
    {"_calib_iterate_total", (DL_FUNC) &_calib_iterate_total, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_calib(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
